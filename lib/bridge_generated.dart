// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'package:meta/meta.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<Platform> platform({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_platform(port_),
        parseSuccessData: _wire2api_platform,
        constMeta: kPlatformConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "platform",
        argNames: [],
      );

  Future<bool> rustReleaseMode({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_rust_release_mode(port_),
        parseSuccessData: _wire2api_bool,
        constMeta: kRustReleaseModeConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_release_mode",
        argNames: [],
      );

  Future<ItemInfo> getNutrition({required Item item, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            _platform.inner.wire_get_nutrition(port_, api2wire_item(item)),
        parseSuccessData: _wire2api_item_info,
        constMeta: kGetNutritionConstMeta,
        argValues: [item],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetNutritionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_nutrition",
        argNames: ["item"],
      );

  Future<List<Item>> searchLocalItems({required String input, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_search_local_items(port_, _platform.api2wire_String(input)),
        parseSuccessData: _wire2api_list_item,
        constMeta: kSearchLocalItemsConstMeta,
        argValues: [input],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSearchLocalItemsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "search_local_items",
        argNames: ["input"],
      );
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_item(Item raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: wire2api

String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

double _wire2api_box_autoadd_f64(dynamic raw) {
  return raw as double;
}

Nutrition _wire2api_box_autoadd_nutrition(dynamic raw) {
  return _wire2api_nutrition(raw);
}

double _wire2api_f64(dynamic raw) {
  return raw as double;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

Item _wire2api_item(dynamic raw) {
  return Item.values[raw];
}

ItemInfo _wire2api_item_info(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return ItemInfo(
    nutrition: _wire2api_opt_box_autoadd_nutrition(arr[0]),
    fileName: _wire2api_String(arr[1]),
    displayName: _wire2api_String(arr[2]),
  );
}

List<Item> _wire2api_list_item(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_item).toList();
}

Nutrition _wire2api_nutrition(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 16)
    throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
  return Nutrition(
    variant: _wire2api_item(arr[0]),
    unitWeight: _wire2api_opt_box_autoadd_f64(arr[1]),
    literWeight: _wire2api_f64(arr[2]),
    calories: _wire2api_f64(arr[3]),
    caloriesFromFat: _wire2api_f64(arr[4]),
    totalFatWeight: _wire2api_f64(arr[5]),
    saturatedFatWeight: _wire2api_f64(arr[6]),
    polyunsaturatedFatWeight: _wire2api_f64(arr[7]),
    monounsaturatedFatWeight: _wire2api_f64(arr[8]),
    cholesterolWeight: _wire2api_f64(arr[9]),
    sodiumWeight: _wire2api_f64(arr[10]),
    potassiumWeight: _wire2api_f64(arr[11]),
    carbohydrateWeight: _wire2api_f64(arr[12]),
    fiberWeight: _wire2api_f64(arr[13]),
    sugarWeight: _wire2api_f64(arr[14]),
    proteinWeight: _wire2api_f64(arr[15]),
  );
}

double? _wire2api_opt_box_autoadd_f64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_f64(raw);
}

Nutrition? _wire2api_opt_box_autoadd_nutrition(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_nutrition(raw);
}

Platform _wire2api_platform(dynamic raw) {
  return Platform.values[raw];
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}
