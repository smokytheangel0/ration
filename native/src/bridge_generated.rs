#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.48.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;

// Section: imports

use crate::items::Item;
use crate::nutrition::ItemInfo;
use crate::nutrition::Nutrition;

// Section: wire functions

fn wire_platform_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "platform",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(platform()),
    )
}
fn wire_rust_release_mode_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "rust_release_mode",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(rust_release_mode()),
    )
}
fn wire_get_nutrition_impl(port_: MessagePort, item: impl Wire2Api<Item> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_nutrition",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_item = item.wire2api();
            move |task_callback| Ok(get_nutrition(api_item))
        },
    )
}
fn wire_search_local_items_impl(port_: MessagePort, input: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "search_local_items",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(search_local_items(api_input))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<Item> for i32 {
    fn wire2api(self) -> Item {
        match self {
            0 => Item::LargeChickenEgg,
            1 => Item::LargeChickenEggYolk,
            2 => Item::LargeChickenEggWhite,
            3 => Item::TableSalt,
            4 => Item::TableSugar,
            5 => Item::Water,
            6 => Item::WheatFlour,
            7 => Item::ActiveDryYeast,
            8 => Item::CowButter,
            9 => Item::NoMatch,
            _ => unreachable!("Invalid variant for Item: {}", self),
        }
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Item {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::LargeChickenEgg => 0,
            Self::LargeChickenEggYolk => 1,
            Self::LargeChickenEggWhite => 2,
            Self::TableSalt => 3,
            Self::TableSugar => 4,
            Self::Water => 5,
            Self::WheatFlour => 6,
            Self::ActiveDryYeast => 7,
            Self::CowButter => 8,
            Self::NoMatch => 9,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Item {}

impl support::IntoDart for ItemInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.nutrition.into_dart(),
            self.file_name.into_dart(),
            self.display_name.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ItemInfo {}

impl support::IntoDart for Nutrition {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.variant.into_dart(),
            self.unit_weight.into_dart(),
            self.liter_weight.into_dart(),
            self.calories.into_dart(),
            self.calories_from_fat.into_dart(),
            self.total_fat_weight.into_dart(),
            self.saturated_fat_weight.into_dart(),
            self.polyunsaturated_fat_weight.into_dart(),
            self.monounsaturated_fat_weight.into_dart(),
            self.cholesterol_weight.into_dart(),
            self.sodium_weight.into_dart(),
            self.potassium_weight.into_dart(),
            self.carbohydrate_weight.into_dart(),
            self.fiber_weight.into_dart(),
            self.sugar_weight.into_dart(),
            self.protein_weight.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Nutrition {}

impl support::IntoDart for Platform {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => 0,
            Self::Android => 1,
            Self::Ios => 2,
            Self::Windows => 3,
            Self::Unix => 4,
            Self::MacIntel => 5,
            Self::MacApple => 6,
            Self::Wasm => 7,
        }
        .into_dart()
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
